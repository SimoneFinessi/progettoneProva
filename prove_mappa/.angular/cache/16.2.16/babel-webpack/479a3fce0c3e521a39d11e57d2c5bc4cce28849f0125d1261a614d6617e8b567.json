{"ast":null,"code":"import * as L from 'leaflet';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./crimes.service\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"./crimes-rate-chicago/crimes-rate-chicago.component\";\nexport class AppComponent {\n  constructor(crimeService, http) {\n    this.crimeService = crimeService;\n    this.http = http;\n    this.crimes = [];\n  } // Inietta HttpClient\n  ngOnInit() {\n    this.initializeMap();\n    this.fetchCrimes();\n    this.loadNeighborhoodBoundaries();\n  }\n  // Funzione per inizializzare la mappa\n  initializeMap() {\n    this.map = L.map('map', {\n      center: [41.8781, -87.6298],\n      zoom: 12\n    });\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    }).addTo(this.map);\n  }\n  // Funzione per recuperare i crimini\n  fetchCrimes() {\n    const params = {\n      '$limit': '1000',\n      '$where': 'year > 2015'\n    };\n    this.crimeService.getCrimes(params).subscribe({\n      next: data => {\n        this.crimes = data;\n        this.colorizeAreas();\n      },\n      error: err => {\n        console.error('Errore nel recupero dei dati: ', err);\n      }\n    });\n  }\n  // Funzione per caricare i distretti di polizia (GeoJSON)\n  loadNeighborhoodBoundaries() {\n    const geojsonUrl = 'assets/Boundaries - Neighborhoods.geojson';\n    this.http.get(geojsonUrl).subscribe(data => {\n      L.geoJSON(data, {\n        style: {\n          color: 'blue',\n          weight: 2,\n          opacity: 0.6,\n          fillOpacity: 0.4\n        },\n        onEachFeature: (feature, layer) => {\n          layer.bindPopup(`<b>Neighborhood:</b> ${feature.properties.neighborhood}`);\n        }\n      }).addTo(this.map);\n    }, error => {\n      console.error('Errore nel caricare il file GeoJSON', error);\n    });\n  }\n  // Funzione per colorare le aree in base ai crimini\n  colorizeAreas() {\n    const crimeCounts = {};\n    this.crimes.forEach(crime => {\n      const district = crime.district;\n      if (district) {\n        if (!crimeCounts[district]) {\n          crimeCounts[district] = 0;\n        }\n        crimeCounts[district]++;\n      }\n    });\n    for (const district in crimeCounts) {\n      const count = crimeCounts[district];\n      const color = this.getColorBasedOnCrimeCount(count);\n      this.drawDistrictPolygon(district, color);\n    }\n  }\n  getColorBasedOnCrimeCount(count) {\n    if (count < 10) {\n      return 'green';\n    } else if (count < 50) {\n      return 'yellow';\n    } else {\n      return 'red';\n    }\n  }\n  drawDistrictPolygon(district, color) {\n    const districtCoordinates = this.getDistrictCoordinates(district);\n    if (districtCoordinates) {\n      L.polygon(districtCoordinates, {\n        color\n      }).addTo(this.map);\n    }\n  }\n  getDistrictCoordinates(district) {\n    const districts = {\n      '1': [[41.8781, -87.6298], [41.8800, -87.6300], [41.8800, -87.6280], [41.8781, -87.6298]]\n    };\n    return districts[district] || null;\n  }\n  static {\n    this.ɵfac = function AppComponent_Factory(t) {\n      return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.CrimesService), i0.ɵɵdirectiveInject(i2.HttpClient));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AppComponent,\n      selectors: [[\"app-root\"]],\n      decls: 3,\n      vars: 0,\n      consts: [[\"id\", \"map\", 2, \"height\", \"500px\"]],\n      template: function AppComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"div\", 0)(1, \"br\")(2, \"app-crimes-rate-chicago\");\n        }\n      },\n      dependencies: [i3.CrimesRateChicagoComponent],\n      styles: [\"#map[_ngcontent-%COMP%] {\\n    height: 100%;\\n    width: 100%;\\n  }\\n  \\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxZQUFZO0lBQ1osV0FBVztFQUNiIiwic291cmNlc0NvbnRlbnQiOlsiI21hcCB7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICB9XHJcbiAgIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["L","AppComponent","constructor","crimeService","http","crimes","ngOnInit","initializeMap","fetchCrimes","loadNeighborhoodBoundaries","map","center","zoom","tileLayer","attribution","addTo","params","getCrimes","subscribe","next","data","colorizeAreas","error","err","console","geojsonUrl","get","geoJSON","style","color","weight","opacity","fillOpacity","onEachFeature","feature","layer","bindPopup","properties","neighborhood","crimeCounts","forEach","crime","district","count","getColorBasedOnCrimeCount","drawDistrictPolygon","districtCoordinates","getDistrictCoordinates","polygon","districts","i0","ɵɵdirectiveInject","i1","CrimesService","i2","HttpClient","selectors","decls","vars","consts","template","AppComponent_Template","rf","ctx","ɵɵelement"],"sources":["C:\\Users\\ricca\\OneDrive\\Desktop\\Mappa_dati\\prove_Safezone\\prove_mappa\\src\\app\\app.component.ts","C:\\Users\\ricca\\OneDrive\\Desktop\\Mappa_dati\\prove_Safezone\\prove_mappa\\src\\app\\app.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { CrimesService } from './crimes.service';\r\nimport { HttpClient } from '@angular/common/http';  // Importa HttpClient\r\nimport * as L from 'leaflet';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent implements OnInit {\r\n  crimes: any[] = [];\r\n  map!: L.Map;\r\n\r\n  constructor(private crimeService: CrimesService, private http: HttpClient) {}  // Inietta HttpClient\r\n\r\n  ngOnInit(): void {\r\n    this.initializeMap();\r\n    this.fetchCrimes();\r\n    this.loadNeighborhoodBoundaries();\r\n  }\r\n\r\n  // Funzione per inizializzare la mappa\r\n  initializeMap(): void {\r\n    this.map = L.map('map', {\r\n      center: [41.8781, -87.6298],\r\n      zoom: 12\r\n    });\r\n\r\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n    }).addTo(this.map);\r\n  }\r\n\r\n  // Funzione per recuperare i crimini\r\n  fetchCrimes(): void {\r\n    const params = {\r\n      '$limit': '1000',\r\n      '$where': 'year > 2015'\r\n    };\r\n\r\n    this.crimeService.getCrimes(params).subscribe({\r\n      next: (data) => {\r\n        this.crimes = data;\r\n        this.colorizeAreas();\r\n      },\r\n      error: (err) => {\r\n        console.error('Errore nel recupero dei dati: ', err);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Funzione per caricare i distretti di polizia (GeoJSON)\r\n  loadNeighborhoodBoundaries(): void {\r\n    const geojsonUrl = 'assets/Boundaries - Neighborhoods.geojson';\r\n\r\n    this.http.get<any>(geojsonUrl).subscribe(data => {\r\n      L.geoJSON(data, {\r\n        style: {\r\n          color: 'blue',\r\n          weight: 2,\r\n          opacity: 0.6,\r\n          fillOpacity: 0.4\r\n        },\r\n        onEachFeature: (feature, layer) => {\r\n          layer.bindPopup(`<b>Neighborhood:</b> ${feature.properties.neighborhood}`);\r\n        }\r\n      }).addTo(this.map);\r\n    }, (error: any) => {\r\n      console.error('Errore nel caricare il file GeoJSON', error);\r\n    });\r\n  }\r\n  \r\n  // Funzione per colorare le aree in base ai crimini\r\n  colorizeAreas(): void {\r\n    const crimeCounts: { [key: string]: number } = {};\r\n\r\n    this.crimes.forEach((crime) => {\r\n      const district = crime.district;\r\n      if (district) {\r\n        if (!crimeCounts[district]) {\r\n          crimeCounts[district] = 0;\r\n        }\r\n        crimeCounts[district]++;\r\n      }\r\n    });\r\n\r\n    for (const district in crimeCounts) {\r\n      const count = crimeCounts[district];\r\n      const color = this.getColorBasedOnCrimeCount(count);\r\n      this.drawDistrictPolygon(district, color);\r\n    }\r\n  }\r\n\r\n  getColorBasedOnCrimeCount(count: number): string {\r\n    if (count < 10) {\r\n      return 'green';\r\n    } else if (count < 50) {\r\n      return 'yellow';\r\n    } else {\r\n      return 'red';\r\n    }\r\n  }\r\n\r\n  drawDistrictPolygon(district: string, color: string): void {\r\n    const districtCoordinates = this.getDistrictCoordinates(district);\r\n\r\n    if (districtCoordinates) {\r\n      L.polygon(districtCoordinates, { color }).addTo(this.map);\r\n    }\r\n  }\r\n\r\n  getDistrictCoordinates(district: string): L.LatLng[] | null {\r\n    const districts: any = {\r\n      '1': [\r\n        [41.8781, -87.6298],\r\n        [41.8800, -87.6300],\r\n        [41.8800, -87.6280],\r\n        [41.8781, -87.6298]\r\n      ]\r\n    };\r\n\r\n    return districts[district] || null;\r\n  }\r\n}\r\n","<div id=\"map\" style=\"height: 500px;\"></div>\r\n<br>\r\n<app-crimes-rate-chicago></app-crimes-rate-chicago>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}