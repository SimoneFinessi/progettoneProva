{"ast":null,"code":"import * as L from 'leaflet'; // Importa Leaflet\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./crimes.service\";\nimport * as i2 from \"./crimes-rate-chicago/crimes-rate-chicago.component\";\nexport class AppComponent {\n  constructor(crimeService) {\n    this.crimeService = crimeService;\n    this.crimes = [];\n  }\n  ngOnInit() {\n    this.initializeMap();\n    this.fetchCrimes();\n  }\n  // Funzione per inizializzare la mappa\n  initializeMap() {\n    this.map = L.map('map', {\n      center: [41.8781, -87.6298],\n      zoom: 12\n    });\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    }).addTo(this.map);\n  }\n  // Funzione per recuperare i crimini\n  fetchCrimes() {\n    const params = {\n      '$limit': '1000',\n      '$where': 'year > 2015' // Filtra per crimini dopo il 2015\n    };\n\n    this.crimeService.getCrimes(params).subscribe({\n      next: data => {\n        this.crimes = data; // Salva i dati\n        this.colorizeAreas(); // Colora le aree sulla mappa\n      },\n\n      error: err => {\n        console.error('Errore nel recupero dei dati: ', err);\n      }\n    });\n  }\n  // Funzione per colorare le aree in base ai crimini\n  colorizeAreas() {\n    const crimeCounts = {}; // Mappa dei distretti e numero di crimini\n    this.crimes.forEach(crime => {\n      const district = crime.district; // Controlla che ci sia un campo 'district' nel dato\n      if (district) {\n        if (!crimeCounts[district]) {\n          crimeCounts[district] = 0;\n        }\n        crimeCounts[district]++;\n      }\n    });\n    // Colora le aree in base ai crimini\n    for (const district in crimeCounts) {\n      const count = crimeCounts[district];\n      const color = this.getColorBasedOnCrimeCount(count);\n      // Usa Leaflet per disegnare il poligono\n      this.drawDistrictPolygon(district, color);\n    }\n  }\n  // Funzione per determinare il colore in base al numero di crimini\n  getColorBasedOnCrimeCount(count) {\n    if (count < 10) {\n      return 'green'; // Pochi crimini\n    } else if (count < 50) {\n      return 'yellow'; // Crimini medi\n    } else {\n      return 'red'; // Molti crimini\n    }\n  }\n  // Funzione per disegnare un poligono sulla mappa\n  drawDistrictPolygon(district, color) {\n    // Dati esempio per un distretto (sostituisci con i poligoni veri di Chicago)\n    const districtCoordinates = this.getDistrictCoordinates(district);\n    if (districtCoordinates) {\n      L.polygon(districtCoordinates, {\n        color\n      }).addTo(this.map);\n    }\n  }\n  // Funzione che restituisce le coordinate di un distretto (esempio fittizio)\n  getDistrictCoordinates(district) {\n    const districts = {\n      '1': [[41.8781, -87.6298], [41.8800, -87.6300], [41.8800, -87.6280], [41.8781, -87.6298]]\n      // Aggiungi altri distretti qui\n    };\n\n    return districts[district] || null;\n  }\n  static {\n    this.ɵfac = function AppComponent_Factory(t) {\n      return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.CrimesService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AppComponent,\n      selectors: [[\"app-root\"]],\n      decls: 3,\n      vars: 0,\n      consts: [[\"id\", \"map\", 2, \"height\", \"500px\"]],\n      template: function AppComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"div\", 0)(1, \"br\")(2, \"app-crimes-rate-chicago\");\n        }\n      },\n      dependencies: [i2.CrimesRateChicagoComponent],\n      styles: [\"#map[_ngcontent-%COMP%] {\\n    height: 100%;\\n    width: 100%;\\n  }\\n  \\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxZQUFZO0lBQ1osV0FBVztFQUNiIiwic291cmNlc0NvbnRlbnQiOlsiI21hcCB7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICB9XHJcbiAgIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["L","AppComponent","constructor","crimeService","crimes","ngOnInit","initializeMap","fetchCrimes","map","center","zoom","tileLayer","attribution","addTo","params","getCrimes","subscribe","next","data","colorizeAreas","error","err","console","crimeCounts","forEach","crime","district","count","color","getColorBasedOnCrimeCount","drawDistrictPolygon","districtCoordinates","getDistrictCoordinates","polygon","districts","i0","ɵɵdirectiveInject","i1","CrimesService","selectors","decls","vars","consts","template","AppComponent_Template","rf","ctx","ɵɵelement"],"sources":["C:\\Users\\ricca\\OneDrive\\Desktop\\Mappa_dati\\prove_Safezone\\prove_mappa\\src\\app\\app.component.ts","C:\\Users\\ricca\\OneDrive\\Desktop\\Mappa_dati\\prove_Safezone\\prove_mappa\\src\\app\\app.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { CrimesService } from './crimes.service';\r\nimport * as L from 'leaflet';  // Importa Leaflet\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent implements OnInit {\r\n  crimes: any[] = [];\r\n  map!: L.Map;\r\n\r\n  constructor(private crimeService: CrimesService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.initializeMap();\r\n    this.fetchCrimes();\r\n  }\r\n\r\n  // Funzione per inizializzare la mappa\r\n  initializeMap(): void {\r\n    this.map = L.map('map', {\r\n      center: [41.8781, -87.6298],  // Coordinate centrali di Chicago\r\n      zoom: 12\r\n    });\r\n\r\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n    }).addTo(this.map);\r\n  }\r\n\r\n  // Funzione per recuperare i crimini\r\n  fetchCrimes(): void {\r\n    const params = {\r\n      '$limit': '1000',  // Limita il numero di risultati (puoi aumentarlo se necessario)\r\n      '$where': 'year > 2015'  // Filtra per crimini dopo il 2015\r\n    };\r\n\r\n    this.crimeService.getCrimes(params).subscribe({\r\n      next: (data) => {\r\n        this.crimes = data;  // Salva i dati\r\n        this.colorizeAreas();  // Colora le aree sulla mappa\r\n      },\r\n      error: (err) => {\r\n        console.error('Errore nel recupero dei dati: ', err);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Funzione per colorare le aree in base ai crimini\r\n  colorizeAreas(): void {\r\n    const crimeCounts: { [key: string]: number } = {};  // Mappa dei distretti e numero di crimini\r\n\r\n    this.crimes.forEach((crime) => {\r\n      const district = crime.district;  // Controlla che ci sia un campo 'district' nel dato\r\n      if (district) {\r\n        if (!crimeCounts[district]) {\r\n          crimeCounts[district] = 0;\r\n        }\r\n        crimeCounts[district]++;\r\n      }\r\n    });\r\n\r\n    // Colora le aree in base ai crimini\r\n    for (const district in crimeCounts) {\r\n      const count = crimeCounts[district];\r\n      const color = this.getColorBasedOnCrimeCount(count);\r\n\r\n      // Usa Leaflet per disegnare il poligono\r\n      this.drawDistrictPolygon(district, color);\r\n    }\r\n  }\r\n\r\n  // Funzione per determinare il colore in base al numero di crimini\r\n  getColorBasedOnCrimeCount(count: number): string {\r\n    if (count < 10) {\r\n      return 'green';  // Pochi crimini\r\n    } else if (count < 50) {\r\n      return 'yellow';  // Crimini medi\r\n    } else {\r\n      return 'red';  // Molti crimini\r\n    }\r\n  }\r\n\r\n  // Funzione per disegnare un poligono sulla mappa\r\n  drawDistrictPolygon(district: string, color: string): void {\r\n    // Dati esempio per un distretto (sostituisci con i poligoni veri di Chicago)\r\n    const districtCoordinates = this.getDistrictCoordinates(district);\r\n\r\n    if (districtCoordinates) {\r\n      L.polygon(districtCoordinates, { color }).addTo(this.map);\r\n    }\r\n  }\r\n\r\n  // Funzione che restituisce le coordinate di un distretto (esempio fittizio)\r\n  getDistrictCoordinates(district: string): L.LatLng[] | null {\r\n    const districts: any = {\r\n      '1': [\r\n        [41.8781, -87.6298],\r\n        [41.8800, -87.6300],\r\n        [41.8800, -87.6280],\r\n        [41.8781, -87.6298]\r\n      ]\r\n      // Aggiungi altri distretti qui\r\n    };\r\n\r\n    return districts[district] || null;\r\n  }\r\n}\r\n","<div id=\"map\" style=\"height: 500px;\"></div>\r\n<br>\r\n<app-crimes-rate-chicago></app-crimes-rate-chicago>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}