{"ast":null,"code":"import * as L from 'leaflet'; // Importa Leaflet\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./crimes.service\";\nexport class AppComponent {\n  // Dati GeoJSON che contengono sia la geometria che il numero di crimini\n  constructor(crimesService) {\n    this.crimesService = crimesService;\n    this.geojsonData = {\n      \"type\": \"FeatureCollection\",\n      \"features\": [{\n        \"type\": \"Feature\",\n        \"properties\": {\n          \"pri_neigh\": \"Grand Boulevard\",\n          \"sec_neigh\": \"Bronzeville\",\n          \"shape_area\": 48492503.1554,\n          \"shape_len\": 28196.837157,\n          \"crime_count\": 17 // Numero di crimini riportati in questo distretto\n        },\n\n        \"geometry\": {\n          \"type\": \"MultiPolygon\",\n          \"coordinates\": [[[[-87.60670812560372, 41.816813771373916], [-87.60670480953513, 41.81657908583583], [-87.60670022648416, 41.8163387135525], [-87.60669581538596, 41.81609935772734], [-87.60668357216166, 41.8155663152661], [-87.60667660553902, 41.81529991216345], [-87.6066796364494, 41.81499416811356], [-87.6066823589318, 41.81471953500857], [-87.60667153481018, 41.814281645324144], [-87.60666414094077, 41.813994602529604], [-87.60665643548607, 41.81366052091473], [-87.60664694986741, 41.81317320016693], [-87.60664346744456, 41.812954776539605], [-87.60662867423541, 41.81240396220565], [-87.60662516618764, 41.8122405459756], [-87.60661336840799, 41.81173632084688], [-87.60660910203794, 41.811578306019406], [-87.60660495088327, 41.811354023192386], [-87.606598238989, 41.81099140177078], [-87.60659114670048, 41.81069722560556], [-87.60657645010201, 41.81006844737666], [-87.60645784312069, 41.80550837382793], [-87.60645400527414, 41.80434643338574], [-87.60644862866428, 41.804081456964894], [-87.60642931863634, 41.803164399498684], [-87.60640720551974, 41.802251163118015], [-87.60676961320164, 41.80223972709815], [-87.60738430279127, 41.80223055825083], [-87.60788582781375, 41.802222908370645], [-87.60912167186511, 41.80220356352347], [-87.60976864658288, 41.8021934526125], [-87.61070817886699, 41.80217757715644], [-87.61128640348198, 41.802169054036874], [-87.61223218645961, 41.802155018273034], [-87.61284548006417, 41.802145886352044], [-87.61379192231995, 41.80213184023216], [-87.6141925555012, 41.802126104110414], [-87.61496762550036, 41.80211480661692], [-87.61539069001685, 41.80210789235424], [-87.6161107439858, 41.802102523296945], [-87.6177465406197, 41.802079477171475], [-87.61855086844588, 41.80206665413523], [-87.61940709713681, 41.802052985011706], [-87.62022464072594, 41.802040318008956], [-87.62102683413576, 41.802026834844845], [-87.62244828825932, 41.80200357057324], [-87.62412482904623, 41.801977143252146], [-87.62620439217072, 41.80194620798645], [-87.62633794725989, 41.80194384093062], [-87.62713946364354, 41.801931124145634], [-87.62757138943122, 41.80192437033149]]]]\n        }\n      }]\n    };\n  }\n  ngOnInit() {\n    this.initMap();\n    this.loadData(); // Carica il file GeoJSON\n  }\n  // Funzione per inizializzare la mappa\n  initMap() {\n    this.map = L.map('map', {\n      center: [41.816813771373916, -87.60670812560372],\n      zoom: 14\n    });\n    // Aggiungi il layer di base di OpenStreetMap\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    }).addTo(this.map);\n  }\n  // Funzione per caricare i dati (crimini e distretti) da un file GeoJSON\n  loadData() {\n    this.crimesService.getCrimes().subscribe(data => {\n      console.log('Dati GeoJSON ricevuti:', data);\n      //this.geojsonData = data;\n      // Aggiungi i distretti e i crimini alla mappa\n      this.addDistrictsToMap(this.geojsonData);\n    }, error => {\n      console.error('Errore nel recupero dei dati:', error);\n    });\n  }\n  // Funzione per aggiungere i distretti con il numero di crimini alla mappa\n  addDistrictsToMap(data) {\n    if (data && data.type === \"FeatureCollection\" && Array.isArray(data.features)) {\n      L.geoJSON(data, {\n        style: {\n          color: 'blue',\n          weight: 2,\n          opacity: 1 // Border opacity\n        },\n\n        onEachFeature: (feature, layer) => {\n          // Check for the required properties to avoid undefined errors\n          const neighborhood = feature.properties?.pri_neigh || \"Unknown\";\n          const crimeCount = feature.properties?.crime_count || 0;\n          layer.bindPopup(`\n            <strong>${neighborhood}</strong><br/>\n            Crimini: ${crimeCount}`);\n        }\n      }).addTo(this.map); // Add to map\n    } else {\n      console.error(\"Invalid GeoJSON data:\", data);\n    }\n  }\n  static {\n    this.ɵfac = function AppComponent_Factory(t) {\n      return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.CrimesService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AppComponent,\n      selectors: [[\"app-root\"]],\n      decls: 1,\n      vars: 0,\n      consts: [[\"id\", \"map\", 2, \"height\", \"500px\"]],\n      template: function AppComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"div\", 0);\n        }\n      },\n      styles: [\"#map[_ngcontent-%COMP%] {\\n    height: 100%;\\n    width: 100%;\\n  }\\n  \\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxZQUFZO0lBQ1osV0FBVztFQUNiIiwic291cmNlc0NvbnRlbnQiOlsiI21hcCB7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICB9XHJcbiAgIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["L","AppComponent","constructor","crimesService","geojsonData","ngOnInit","initMap","loadData","map","center","zoom","tileLayer","attribution","addTo","getCrimes","subscribe","data","console","log","addDistrictsToMap","error","type","Array","isArray","features","geoJSON","style","color","weight","opacity","onEachFeature","feature","layer","neighborhood","properties","pri_neigh","crimeCount","crime_count","bindPopup","i0","ɵɵdirectiveInject","i1","CrimesService","selectors","decls","vars","consts","template","AppComponent_Template","rf","ctx","ɵɵelement"],"sources":["C:\\Users\\simon\\Desktop\\Mappa_dati\\prove_Safezone\\prove_mappa\\src\\app\\app.component.ts","C:\\Users\\simon\\Desktop\\Mappa_dati\\prove_Safezone\\prove_mappa\\src\\app\\app.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { CrimesService } from './crimes.service';\r\nimport * as L from 'leaflet';  // Importa Leaflet\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent implements OnInit {\r\n  geojsonData={\r\n    \"type\": \"FeatureCollection\",\r\n    \"features\": [\r\n      {\r\n        \"type\": \"Feature\",\r\n        \"properties\": {\r\n          \"pri_neigh\": \"Grand Boulevard\",   // Nome principale del distretto o quartiere\r\n          \"sec_neigh\": \"Bronzeville\",       // Nome secondario o soprannome del distretto\r\n          \"shape_area\": 48492503.1554,      // Area approssimativa del distretto\r\n          \"shape_len\": 28196.837157,        // Lunghezza del perimetro del distretto\r\n          \"crime_count\": 17                 // Numero di crimini riportati in questo distretto\r\n        },\r\n        \"geometry\": {\r\n          \"type\": \"MultiPolygon\",\r\n          \"coordinates\": [\r\n            [\r\n              [\r\n                [-87.60670812560372, 41.816813771373916],\r\n                [-87.60670480953513, 41.81657908583583],\r\n                [-87.60670022648416, 41.8163387135525],\r\n                [-87.60669581538596, 41.81609935772734],\r\n                [-87.60668357216166, 41.8155663152661],\r\n                [-87.60667660553902, 41.81529991216345],\r\n                [-87.6066796364494, 41.81499416811356],\r\n                [-87.6066823589318, 41.81471953500857],\r\n                [-87.60667153481018, 41.814281645324144],\r\n                [-87.60666414094077, 41.813994602529604],\r\n                [-87.60665643548607, 41.81366052091473],\r\n                [-87.60664694986741, 41.81317320016693],\r\n                [-87.60664346744456, 41.812954776539605],\r\n                [-87.60662867423541, 41.81240396220565],\r\n                [-87.60662516618764, 41.8122405459756],\r\n                [-87.60661336840799, 41.81173632084688],\r\n                [-87.60660910203794, 41.811578306019406],\r\n                [-87.60660495088327, 41.811354023192386],\r\n                [-87.606598238989, 41.81099140177078],\r\n                [-87.60659114670048, 41.81069722560556],\r\n                [-87.60657645010201, 41.81006844737666],\r\n                [-87.60645784312069, 41.80550837382793],\r\n                [-87.60645400527414, 41.80434643338574],\r\n                [-87.60644862866428, 41.804081456964894],\r\n                [-87.60642931863634, 41.803164399498684],\r\n                [-87.60640720551974, 41.802251163118015],\r\n                [-87.60676961320164, 41.80223972709815],\r\n                [-87.60738430279127, 41.80223055825083],\r\n                [-87.60788582781375, 41.802222908370645],\r\n                [-87.60912167186511, 41.80220356352347],\r\n                [-87.60976864658288, 41.8021934526125],\r\n                [-87.61070817886699, 41.80217757715644],\r\n                [-87.61128640348198, 41.802169054036874],\r\n                [-87.61223218645961, 41.802155018273034],\r\n                [-87.61284548006417, 41.802145886352044],\r\n                [-87.61379192231995, 41.80213184023216],\r\n                [-87.6141925555012, 41.802126104110414],\r\n                [-87.61496762550036, 41.80211480661692],\r\n                [-87.61539069001685, 41.80210789235424],\r\n                [-87.6161107439858, 41.802102523296945],\r\n                [-87.6177465406197, 41.802079477171475],\r\n                [-87.61855086844588, 41.80206665413523],\r\n                [-87.61940709713681, 41.802052985011706],\r\n                [-87.62022464072594, 41.802040318008956],\r\n                [-87.62102683413576, 41.802026834844845],\r\n                [-87.62244828825932, 41.80200357057324],\r\n                [-87.62412482904623, 41.801977143252146],\r\n                [-87.62620439217072, 41.80194620798645],\r\n                [-87.62633794725989, 41.80194384093062],\r\n                [-87.62713946364354, 41.801931124145634],\r\n                [-87.62757138943122, 41.80192437033149]\r\n              ]\r\n            ]\r\n          ]\r\n        }\r\n      }\r\n    ]\r\n  }\r\n   // Dati GeoJSON che contengono sia la geometria che il numero di crimini\r\n\r\n  constructor(private crimesService: CrimesService) { }\r\n\r\n  map!: L.Map;\r\n\r\n  ngOnInit(): void {\r\n    this.initMap();\r\n    this.loadData(); // Carica il file GeoJSON\r\n  }\r\n\r\n  // Funzione per inizializzare la mappa\r\n  initMap(): void {\r\n    this.map = L.map('map', {\r\n      center: [41.816813771373916, -87.60670812560372],  // Coordinate centrali per Chicago\r\n      zoom: 14\r\n    });\r\n\r\n    // Aggiungi il layer di base di OpenStreetMap\r\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n    }).addTo(this.map);\r\n  }\r\n\r\n  // Funzione per caricare i dati (crimini e distretti) da un file GeoJSON\r\n  loadData(): void {\r\n    this.crimesService.getCrimes().subscribe(\r\n      (data) => {\r\n        console.log('Dati GeoJSON ricevuti:', data);\r\n        //this.geojsonData = data;\r\n        \r\n        // Aggiungi i distretti e i crimini alla mappa\r\n        this.addDistrictsToMap(this.geojsonData);\r\n      },\r\n      (error) => {\r\n        console.error('Errore nel recupero dei dati:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  // Funzione per aggiungere i distretti con il numero di crimini alla mappa\r\n  addDistrictsToMap(data: any): void {\r\n    if (data && data.type === \"FeatureCollection\" && Array.isArray(data.features)) {\r\n      L.geoJSON(data, {\r\n        style: {\r\n          color: 'blue',   // Border color\r\n          weight: 2,       // Border thickness\r\n          opacity: 1       // Border opacity\r\n        },\r\n        onEachFeature: (feature, layer) => {\r\n          // Check for the required properties to avoid undefined errors\r\n          const neighborhood = feature.properties?.pri_neigh || \"Unknown\";\r\n          const crimeCount = feature.properties?.crime_count || 0;\r\n          layer.bindPopup(`\r\n            <strong>${neighborhood}</strong><br/>\r\n            Crimini: ${crimeCount}`);\r\n        }\r\n      }).addTo(this.map); // Add to map\r\n    } else {\r\n      console.error(\"Invalid GeoJSON data:\", data);\r\n    }\r\n  }\r\n}\r\n","<div id=\"map\" style=\"height: 500px;\"></div>"],"mappings":"AAEA,OAAO,KAAKA,CAAC,MAAM,SAAS,CAAC,CAAE;;;AAO/B,OAAM,MAAOC,YAAY;EA4EtB;EAEDC,YAAoBC,aAA4B;IAA5B,KAAAA,aAAa,GAAbA,aAAa;IA7EjC,KAAAC,WAAW,GAAC;MACV,MAAM,EAAE,mBAAmB;MAC3B,UAAU,EAAE,CACV;QACE,MAAM,EAAE,SAAS;QACjB,YAAY,EAAE;UACZ,WAAW,EAAE,iBAAiB;UAC9B,WAAW,EAAE,aAAa;UAC1B,YAAY,EAAE,aAAa;UAC3B,WAAW,EAAE,YAAY;UACzB,aAAa,EAAE,EAAE,CAAiB;SACnC;;QACD,UAAU,EAAE;UACV,MAAM,EAAE,cAAc;UACtB,aAAa,EAAE,CACb,CACE,CACE,CAAC,CAAC,iBAAiB,EAAE,kBAAkB,CAAC,EACxC,CAAC,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,EACvC,CAAC,CAAC,iBAAiB,EAAE,gBAAgB,CAAC,EACtC,CAAC,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,EACvC,CAAC,CAAC,iBAAiB,EAAE,gBAAgB,CAAC,EACtC,CAAC,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,EACvC,CAAC,CAAC,gBAAgB,EAAE,iBAAiB,CAAC,EACtC,CAAC,CAAC,gBAAgB,EAAE,iBAAiB,CAAC,EACtC,CAAC,CAAC,iBAAiB,EAAE,kBAAkB,CAAC,EACxC,CAAC,CAAC,iBAAiB,EAAE,kBAAkB,CAAC,EACxC,CAAC,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,EACvC,CAAC,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,EACvC,CAAC,CAAC,iBAAiB,EAAE,kBAAkB,CAAC,EACxC,CAAC,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,EACvC,CAAC,CAAC,iBAAiB,EAAE,gBAAgB,CAAC,EACtC,CAAC,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,EACvC,CAAC,CAAC,iBAAiB,EAAE,kBAAkB,CAAC,EACxC,CAAC,CAAC,iBAAiB,EAAE,kBAAkB,CAAC,EACxC,CAAC,CAAC,eAAe,EAAE,iBAAiB,CAAC,EACrC,CAAC,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,EACvC,CAAC,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,EACvC,CAAC,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,EACvC,CAAC,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,EACvC,CAAC,CAAC,iBAAiB,EAAE,kBAAkB,CAAC,EACxC,CAAC,CAAC,iBAAiB,EAAE,kBAAkB,CAAC,EACxC,CAAC,CAAC,iBAAiB,EAAE,kBAAkB,CAAC,EACxC,CAAC,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,EACvC,CAAC,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,EACvC,CAAC,CAAC,iBAAiB,EAAE,kBAAkB,CAAC,EACxC,CAAC,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,EACvC,CAAC,CAAC,iBAAiB,EAAE,gBAAgB,CAAC,EACtC,CAAC,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,EACvC,CAAC,CAAC,iBAAiB,EAAE,kBAAkB,CAAC,EACxC,CAAC,CAAC,iBAAiB,EAAE,kBAAkB,CAAC,EACxC,CAAC,CAAC,iBAAiB,EAAE,kBAAkB,CAAC,EACxC,CAAC,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,EACvC,CAAC,CAAC,gBAAgB,EAAE,kBAAkB,CAAC,EACvC,CAAC,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,EACvC,CAAC,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,EACvC,CAAC,CAAC,gBAAgB,EAAE,kBAAkB,CAAC,EACvC,CAAC,CAAC,gBAAgB,EAAE,kBAAkB,CAAC,EACvC,CAAC,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,EACvC,CAAC,CAAC,iBAAiB,EAAE,kBAAkB,CAAC,EACxC,CAAC,CAAC,iBAAiB,EAAE,kBAAkB,CAAC,EACxC,CAAC,CAAC,iBAAiB,EAAE,kBAAkB,CAAC,EACxC,CAAC,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,EACvC,CAAC,CAAC,iBAAiB,EAAE,kBAAkB,CAAC,EACxC,CAAC,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,EACvC,CAAC,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,EACvC,CAAC,CAAC,iBAAiB,EAAE,kBAAkB,CAAC,EACxC,CAAC,CAAC,iBAAiB,EAAE,iBAAiB,CAAC,CACxC,CACF;;OAGN;KAEJ;EAGmD;EAIpDC,QAAQA,CAAA;IACN,IAAI,CAACC,OAAO,EAAE;IACd,IAAI,CAACC,QAAQ,EAAE,CAAC,CAAC;EACnB;EAEA;EACAD,OAAOA,CAAA;IACL,IAAI,CAACE,GAAG,GAAGR,CAAC,CAACQ,GAAG,CAAC,KAAK,EAAE;MACtBC,MAAM,EAAE,CAAC,kBAAkB,EAAE,CAAC,iBAAiB,CAAC;MAChDC,IAAI,EAAE;KACP,CAAC;IAEF;IACAV,CAAC,CAACW,SAAS,CAAC,oDAAoD,EAAE;MAChEC,WAAW,EAAE;KACd,CAAC,CAACC,KAAK,CAAC,IAAI,CAACL,GAAG,CAAC;EACpB;EAEA;EACAD,QAAQA,CAAA;IACN,IAAI,CAACJ,aAAa,CAACW,SAAS,EAAE,CAACC,SAAS,CACrCC,IAAI,IAAI;MACPC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEF,IAAI,CAAC;MAC3C;MAEA;MACA,IAAI,CAACG,iBAAiB,CAAC,IAAI,CAACf,WAAW,CAAC;IAC1C,CAAC,EACAgB,KAAK,IAAI;MACRH,OAAO,CAACG,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACvD,CAAC,CACF;EACH;EAEA;EACAD,iBAAiBA,CAACH,IAAS;IACzB,IAAIA,IAAI,IAAIA,IAAI,CAACK,IAAI,KAAK,mBAAmB,IAAIC,KAAK,CAACC,OAAO,CAACP,IAAI,CAACQ,QAAQ,CAAC,EAAE;MAC7ExB,CAAC,CAACyB,OAAO,CAACT,IAAI,EAAE;QACdU,KAAK,EAAE;UACLC,KAAK,EAAE,MAAM;UACbC,MAAM,EAAE,CAAC;UACTC,OAAO,EAAE,CAAC,CAAO;SAClB;;QACDC,aAAa,EAAEA,CAACC,OAAO,EAAEC,KAAK,KAAI;UAChC;UACA,MAAMC,YAAY,GAAGF,OAAO,CAACG,UAAU,EAAEC,SAAS,IAAI,SAAS;UAC/D,MAAMC,UAAU,GAAGL,OAAO,CAACG,UAAU,EAAEG,WAAW,IAAI,CAAC;UACvDL,KAAK,CAACM,SAAS,CAAC;sBACJL,YAAY;uBACXG,UAAU,EAAE,CAAC;QAC5B;OACD,CAAC,CAACvB,KAAK,CAAC,IAAI,CAACL,GAAG,CAAC,CAAC,CAAC;KACrB,MAAM;MACLS,OAAO,CAACG,KAAK,CAAC,uBAAuB,EAAEJ,IAAI,CAAC;;EAEhD;;;uBAzIWf,YAAY,EAAAsC,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,aAAA;IAAA;EAAA;;;YAAZzC,YAAY;MAAA0C,SAAA;MAAAC,KAAA;MAAAC,IAAA;MAAAC,MAAA;MAAAC,QAAA,WAAAC,sBAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCTzBV,EAAA,CAAAY,SAAA,aAA2C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}