{"ast":null,"code":"import * as L from 'leaflet'; // Importa Leaflet\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./crimes.service\";\nexport class AppComponent {\n  constructor(crimesService) {\n    this.crimesService = crimesService;\n  }\n  ngOnInit() {\n    this.initMap();\n    this.loadData(); // Carica il file GeoJSON\n  }\n  // Funzione per inizializzare la mappa\n  initMap() {\n    this.map = L.map('map', {\n      center: [41.816813771373916, -87.60670812560372],\n      zoom: 14\n    });\n    // Aggiungi il layer di base di OpenStreetMap\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n    }).addTo(this.map);\n  }\n  // Funzione per caricare i dati (crimini e distretti) da un file GeoJSON\n  loadData() {\n    this.crimesService.getCrimes().subscribe(data => {\n      console.log('Dati GeoJSON ricevuti:', data);\n      this.geojsonData = data;\n      console.log(this.geojsonData);\n      // Aggiungi i distretti e i crimini alla mappa\n      this.addDistrictsToMap(this.geojsonData);\n    }, error => {\n      console.error('Errore nel recupero dei dati:', error);\n    });\n  }\n  // Funzione per aggiungere i distretti con il numero di crimini alla mappa\n  addDistrictsToMap(data) {\n    L.geoJSON(data, {\n      style: {\n        color: 'blue',\n        weight: 2,\n        opacity: 1 // Border opacity\n      },\n\n      onEachFeature: (feature, layer) => {\n        // Check for the required properties to avoid undefined errors\n        const neighborhood = feature.properties?.pri_neigh || \"Unknown\";\n        const crimeCount = feature.properties?.crime_count || 0;\n        layer.bindPopup(`\n          <strong>${neighborhood}</strong><br/>\n          Crimini: ${crimeCount}`);\n      }\n    }).addTo(this.map); // Add to map\n  }\n\n  static {\n    this.ɵfac = function AppComponent_Factory(t) {\n      return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.CrimesService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AppComponent,\n      selectors: [[\"app-root\"]],\n      decls: 1,\n      vars: 0,\n      consts: [[\"id\", \"map\", 2, \"height\", \"500px\"]],\n      template: function AppComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"div\", 0);\n        }\n      },\n      styles: [\"#map[_ngcontent-%COMP%] {\\n    height: 100%;\\n    width: 100%;\\n  }\\n  \\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxZQUFZO0lBQ1osV0FBVztFQUNiIiwic291cmNlc0NvbnRlbnQiOlsiI21hcCB7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICB9XHJcbiAgIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["L","AppComponent","constructor","crimesService","ngOnInit","initMap","loadData","map","center","zoom","tileLayer","attribution","addTo","getCrimes","subscribe","data","console","log","geojsonData","addDistrictsToMap","error","geoJSON","style","color","weight","opacity","onEachFeature","feature","layer","neighborhood","properties","pri_neigh","crimeCount","crime_count","bindPopup","i0","ɵɵdirectiveInject","i1","CrimesService","selectors","decls","vars","consts","template","AppComponent_Template","rf","ctx","ɵɵelement"],"sources":["C:\\Users\\simon\\Desktop\\Mappa_dati\\prove_Safezone\\prove_mappa\\src\\app\\app.component.ts","C:\\Users\\simon\\Desktop\\Mappa_dati\\prove_Safezone\\prove_mappa\\src\\app\\app.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { CrimesService } from './crimes.service';\r\nimport * as L from 'leaflet';  // Importa Leaflet\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent implements OnInit {\r\n  geojsonData:any; // Dati GeoJSON che contengono sia la geometria che il numero di crimini\r\n\r\n  constructor(private crimesService: CrimesService) { }\r\n\r\n  map!: L.Map;\r\n\r\n  ngOnInit(): void {\r\n    this.initMap();\r\n    this.loadData(); // Carica il file GeoJSON\r\n  }\r\n\r\n  // Funzione per inizializzare la mappa\r\n  initMap(): void {\r\n    this.map = L.map('map', {\r\n      center: [41.816813771373916, -87.60670812560372],  // Coordinate centrali per Chicago\r\n      zoom: 14\r\n    });\r\n\r\n    // Aggiungi il layer di base di OpenStreetMap\r\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n    }).addTo(this.map);\r\n  }\r\n\r\n  // Funzione per caricare i dati (crimini e distretti) da un file GeoJSON\r\n  loadData(): void {\r\n    this.crimesService.getCrimes().subscribe(\r\n      (data) => {\r\n        console.log('Dati GeoJSON ricevuti:', data);\r\n        this.geojsonData = data;\r\n        console.log(this.geojsonData);\r\n        // Aggiungi i distretti e i crimini alla mappa\r\n        this.addDistrictsToMap(this.geojsonData);\r\n      },\r\n      (error) => {\r\n        console.error('Errore nel recupero dei dati:', error);\r\n      }\r\n    );\r\n  }\r\n\r\n  // Funzione per aggiungere i distretti con il numero di crimini alla mappa\r\n  addDistrictsToMap(data: any): void {\r\n  \r\n    L.geoJSON(data, {\r\n      style: {\r\n        color: 'blue',   // Border color\r\n        weight: 2,       // Border thickness\r\n        opacity: 1       // Border opacity\r\n      },\r\n      onEachFeature: (feature, layer) => {\r\n        // Check for the required properties to avoid undefined errors\r\n        const neighborhood = feature.properties?.pri_neigh || \"Unknown\";\r\n        const crimeCount = feature.properties?.crime_count || 0;\r\n        layer.bindPopup(`\r\n          <strong>${neighborhood}</strong><br/>\r\n          Crimini: ${crimeCount}`);\r\n      }\r\n    }).addTo(this.map); // Add to map\r\n  \r\n}\r\n}\r\n","<div id=\"map\" style=\"height: 500px;\"></div>"],"mappings":"AAEA,OAAO,KAAKA,CAAC,MAAM,SAAS,CAAC,CAAE;;;AAO/B,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,aAA4B;IAA5B,KAAAA,aAAa,GAAbA,aAAa;EAAmB;EAIpDC,QAAQA,CAAA;IACN,IAAI,CAACC,OAAO,EAAE;IACd,IAAI,CAACC,QAAQ,EAAE,CAAC,CAAC;EACnB;EAEA;EACAD,OAAOA,CAAA;IACL,IAAI,CAACE,GAAG,GAAGP,CAAC,CAACO,GAAG,CAAC,KAAK,EAAE;MACtBC,MAAM,EAAE,CAAC,kBAAkB,EAAE,CAAC,iBAAiB,CAAC;MAChDC,IAAI,EAAE;KACP,CAAC;IAEF;IACAT,CAAC,CAACU,SAAS,CAAC,oDAAoD,EAAE;MAChEC,WAAW,EAAE;KACd,CAAC,CAACC,KAAK,CAAC,IAAI,CAACL,GAAG,CAAC;EACpB;EAEA;EACAD,QAAQA,CAAA;IACN,IAAI,CAACH,aAAa,CAACU,SAAS,EAAE,CAACC,SAAS,CACrCC,IAAI,IAAI;MACPC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEF,IAAI,CAAC;MAC3C,IAAI,CAACG,WAAW,GAAGH,IAAI;MACvBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,WAAW,CAAC;MAC7B;MACA,IAAI,CAACC,iBAAiB,CAAC,IAAI,CAACD,WAAW,CAAC;IAC1C,CAAC,EACAE,KAAK,IAAI;MACRJ,OAAO,CAACI,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACvD,CAAC,CACF;EACH;EAEA;EACAD,iBAAiBA,CAACJ,IAAS;IAEzBf,CAAC,CAACqB,OAAO,CAACN,IAAI,EAAE;MACdO,KAAK,EAAE;QACLC,KAAK,EAAE,MAAM;QACbC,MAAM,EAAE,CAAC;QACTC,OAAO,EAAE,CAAC,CAAO;OAClB;;MACDC,aAAa,EAAEA,CAACC,OAAO,EAAEC,KAAK,KAAI;QAChC;QACA,MAAMC,YAAY,GAAGF,OAAO,CAACG,UAAU,EAAEC,SAAS,IAAI,SAAS;QAC/D,MAAMC,UAAU,GAAGL,OAAO,CAACG,UAAU,EAAEG,WAAW,IAAI,CAAC;QACvDL,KAAK,CAACM,SAAS,CAAC;oBACJL,YAAY;qBACXG,UAAU,EAAE,CAAC;MAC5B;KACD,CAAC,CAACpB,KAAK,CAAC,IAAI,CAACL,GAAG,CAAC,CAAC,CAAC;EAExB;;;;uBA5DaN,YAAY,EAAAkC,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,aAAA;IAAA;EAAA;;;YAAZrC,YAAY;MAAAsC,SAAA;MAAAC,KAAA;MAAAC,IAAA;MAAAC,MAAA;MAAAC,QAAA,WAAAC,sBAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCTzBV,EAAA,CAAAY,SAAA,aAA2C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}