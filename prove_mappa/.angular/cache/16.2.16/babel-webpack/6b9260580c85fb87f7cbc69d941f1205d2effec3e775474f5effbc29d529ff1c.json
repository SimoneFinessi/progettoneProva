{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CrimesService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'https://data.cityofchicago.org/resource/ijzp-q8t2.json';\n  }\n  // Funzione per ottenere i crimini, con eventuali parametri di ricerca\n  getCrimes(params) {\n    let httpParams = new HttpParams();\n    // Aggiungi i parametri di ricerca se ci sono\n    if (params) {\n      for (const key in params) {\n        if (params.hasOwnProperty(key)) {\n          httpParams = httpParams.set(key, params[key]);\n        }\n      }\n    }\n    return this.http.get(this.apiUrl, {\n      params: httpParams\n    });\n  }\n  static {\n    this.ɵfac = function CrimesService_Factory(t) {\n      return new (t || CrimesService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: CrimesService,\n      factory: CrimesService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpParams","CrimesService","constructor","http","apiUrl","getCrimes","params","httpParams","key","hasOwnProperty","set","get","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\ricca\\OneDrive\\Desktop\\Mappa_dati\\prove_Safezone\\prove_mappa\\src\\app\\crimes.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CrimesService {\r\n  private apiUrl = 'https://data.cityofchicago.org/resource/ijzp-q8t2.json';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  // Funzione per ottenere i crimini, con eventuali parametri di ricerca\r\n  getCrimes(params?: any): Observable<any[]> {\r\n    let httpParams = new HttpParams();\r\n\r\n    // Aggiungi i parametri di ricerca se ci sono\r\n    if (params) {\r\n      for (const key in params) {\r\n        if (params.hasOwnProperty(key)) {\r\n          httpParams = httpParams.set(key, params[key]);\r\n        }\r\n      }\r\n    }\r\n\r\n    return this.http.get<any[]>(this.apiUrl, { params: httpParams });\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAqBA,UAAU,QAAQ,sBAAsB;;;AAM7D,OAAM,MAAOC,aAAa;EAGxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,wDAAwD;EAEjC;EAExC;EACAC,SAASA,CAACC,MAAY;IACpB,IAAIC,UAAU,GAAG,IAAIP,UAAU,EAAE;IAEjC;IACA,IAAIM,MAAM,EAAE;MACV,KAAK,MAAME,GAAG,IAAIF,MAAM,EAAE;QACxB,IAAIA,MAAM,CAACG,cAAc,CAACD,GAAG,CAAC,EAAE;UAC9BD,UAAU,GAAGA,UAAU,CAACG,GAAG,CAACF,GAAG,EAAEF,MAAM,CAACE,GAAG,CAAC,CAAC;;;;IAKnD,OAAO,IAAI,CAACL,IAAI,CAACQ,GAAG,CAAQ,IAAI,CAACP,MAAM,EAAE;MAAEE,MAAM,EAAEC;IAAU,CAAE,CAAC;EAClE;;;uBAnBWN,aAAa,EAAAW,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAbd,aAAa;MAAAe,OAAA,EAAbf,aAAa,CAAAgB,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}